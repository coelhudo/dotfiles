#!/bin/zsh

if [[ $TERM == "dumb" ]]; then
    unsetopt zle
    unsetopt prompt_cr
    unsetopt prompt_subst

    if whence -w precmd >/dev/null; then
        unfunciton precmd;
    fi

    if whence -w preexec >/dev/null; then
        unfunciton preexec;
    fi

    PS1='$ '
    return
fi

export ZSH_CUSTOM=~/.local/zsh/

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt autocd notify correct promptsubst
unsetopt appendhistory beep
setopt histignorespace
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

autoload -U select-word-style
select-word-style bash

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

if whence dircolors > /dev/null; then
    eval $(dircolors $ZSH_CUSTOM/dircolors/dircolors)
    alias ls="ls --color"
elif whence gdircolors > /dev/null; then
    export CLICOLOR=YES
fi

plugins=(git zsh-autosuggestions zsh-completions zsh-syntax-highlighting)

for plugin in $plugins;
do
  if [ -e $ZSH_CUSTOM/plugins/ ] && [ -e $ZSH_CUSTOM/plugins/$plugin ];
  then
     source $ZSH_CUSTOM/plugins/$plugin/$plugin.zsh
  fi
done

autoload -Uz promptinit
promptinit

autoload bashcompinit
bashcompinit

fpath=($HOME/.local/zsh/completions $fpath)

#export FOAM_INST_DIR=~/.local/opt/openfoam/OpenFOAM-v1906
#alias ofoam="source ${FOAM_INST_DIR}/OpenFOAM-5.0/etc/bashrc"

export PATH=$PATH:~/.opam/default/bin:~/.local/bin:~/.stack/programs/x86_64-linux/ghc-tinfo6-8.10.7/bin/
export MANPATH=$HOME/.local/man:$HOME/.local/share/man:$MANPATH
export EDITOR=emacs

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l > /dev/null || ssh-add

if [ ! -S ~/.gnupg/gnupg_auth_sock ]; then
  eval $( gpg-agent --daemon --options ~/.gnupg/gpg-agent.conf )
  ln -sf "$SSH_AUTH_SOCK" ~/.gnupg/gnupg_auth_sock
fi

if [ -f ~/.gnupg/gnupg_auth_sock ]; then
    export SSH_AUTH_SOCK=~/.gnupg/gnupg_auth_sock
    GPG_TTY=$(tty)
    export GPG_TTY
fi

export LESS='-R'

function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null)
  if [[ -n $ref ]];
  then
      local STATUS
      local -a FLAGS
      FLAGS=('--porcelain')
      if [[ "$DISABLE_UNTRACKED_FILES_DIRTY" == "true" ]]; then
          FLAGS+='--untracked-files=no'
      fi
      STATUS=$(command git status ${FLAGS} 2> /dev/null | tail -n1)
      local status
      git_status="✓"
      if [[ -n $STATUS ]]; then
          git_status="✗"
      fi

      echo "%F{yellow}‹${ref#refs/heads/} ${git_status}› %f"
  fi
}

local git_branch='$(git_prompt_info)'
local git_dirty='$(parse_git_dirty)'
export PROMPT="%F{green}%n@%m%f %F{red}[%D{%L:%M:%S}] %F{blue}%3~%f ${git_branch}
%F{yellow}%#%f "
export RPROMPT='%B%(?..%F{red}%? ↵%f)%b'

if [ -d $HOME/perl5 ]; then
    PATH="$HOME/perl5/bin${PATH:+:${PATH}}"; export PATH;
    PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
    PERL_LOCAL_LIB_ROOT="/home/coelho/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
    #PERL_MB_OPT="--install_base \"/home/coelho/perl5\""; export PERL_MB_OPT;
    #PERL_MM_OPT="INSTALL_BASE=/home/coelho/perl5"; export PERL_MM_OPT;
fi

if [ -d $HOME/.nvm ]; then
    export NVM_DIR="$HOME/.nvm"

    #for linux
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

    #for macos
    [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
    #[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
    [ -s "$HOME/homebrew/opt/nvm/nvm.sh" ] && \. "$HOME/homebrew/opt/nvm/nvm.sh"  # This loads nvm
fi

awslogin () {
    PYTHONWARNINGS="ignore" aws-adfs login --adfs-host=adfs.wgu.edu --ssl-verification --session-duration 14400 --no-sspi "$@"
}

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

if [ -d $HOME/homebrew ]; then
    export PATH=$HOME/homebrew/bin:$HOME/homebrew/sbin:$PATH
fi

if [ -d $HOME/.pyenv ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

if whence -w minikube >/dev/null; then
    eval $(minikube docker-env)
fi

if whence -w bat >/dev/null; then
    alias cat="bat --theme ansi"
fi
alias lemacs="emacs -nw -q"
